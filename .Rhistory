theme_maps <- function (gg,showLegend=T, aspectration,...) {
ggplot2::theme(
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
axis.text = ggplot2::element_blank()
)
}
gg <- ggplot2::ggplot(dt_plot, ggplot2::aes(x = long, y = lat)) +
ggiraph::geom_polygon_interactive(ggplot2::aes(
fill = value, group = group,
tooltip = sprintf(
"Count: %f\nCountry: %s",
value,
parse_author_location
),
data_id = value
), color = NA) +
ggplot2::scale_fill_gradient(low = "#f7b49e", high = "#f74307", name="Number of tweets:") +
ggplot2::labs(
x="",
y=""
) +
theme_maps()
return(my_girafe(gg, 6, 2.5))
my_girafe = function(ggobj, width_svg=6, height_svg=5, hover_col="#d211f4",...) {
ggiraph::girafe(
ggobj=ggobj,
width_svg=width_svg,
height_svg=height_svg,
options = list(
ggiraph::opts_hover_inv(css = "opacity:0.1;"),
ggiraph::opts_hover(css = sprintf("fill:%s;", hover_col)),
ggiraph::opts_zoom(max = 5)
),
...
)
}
my_girafe(gg, 6, 2.5)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
library(covidMentalHealth)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
library(covidMentalHealth)
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
install.packages("rmarkdown")
install.packages("rmarkdown")
usethis::use_package( "rmarkdown" )
# Building a Prod-Ready, Robust Shiny Application.
#
# README: each step of the dev files is optional, and you don't have to
# fill every dev scripts before getting started.
# 01_start.R should be filled at start.
# 02_dev.R should be used to keep track of your development during the project.
# 03_deploy.R should be used once you need to deploy your app.
#
#
###################################
#### CURRENT FILE: DEV SCRIPT #####
###################################
# Engineering
## Dependencies ----
## Add one line by package you want to add as dependency
usethis::use_package( "ggplot2" )
usethis::use_package( "ggiraph" )
usethis::use_package( "ggwordcloud" )
usethis::use_package( "shinydashboard" )
usethis::use_package( "shinydashboardPlus" )
usethis::use_package( "dashboardthemes" )
usethis::use_package( "data.table" , min_version = T)
usethis::use_package( "shinyWidgets" )
usethis::use_package( "reticulate" )
usethis::use_package( "dplyr" )
usethis::use_package( "tidyr" )
usethis::use_package( "tidytext" )
usethis::use_package( "shinycssloaders" )
usethis::use_package( "lubridate" )
usethis::use_package( "zoo" )
usethis::use_package( "rmarkdown" )
## Add modules ----
## Create a module infrastructure in R/
golem::add_module( name = "at_a_glance" ) # Name of the module
golem::add_module( name = "covid" ) # Name of the module
golem::add_module( name = "mental" ) # Name of the module
golem::add_module( name = "data" ) # Name of the module
golem::add_module( name = "change_theme" )
## Add helper functions ----
## Creates ftc_* and utils_*
golem::add_fct( "import_tweets" )
golem::add_fct( "import_latest_tweets" )
golem::add_fct( "import_covid" )
golem::add_fct( "install_py_dependencies" )
golem::add_utils( "complete_dt" )
golem::add_fct( "prepare_tweet_text" )
golem::add_fct( "get_sentiment" )
golem::add_fct( "plot_theme" )
golem::add_fct( "theme_maps" )
golem::add_fct( "my_girafe" )
## External resources
## Creates .js and .css files at inst/app/www
#golem::add_js_file( "script" )
#golem::add_js_handler( "handlers" )
#golem::add_css_file( "custom" )
## Add internal datasets ----
## If you have data in your package
#usethis::use_data_raw( name = "my_dataset", open = FALSE )
## Tests ----
## Add one line by test you want to create
#usethis::use_test( "app" )
# Documentation
## Vignette ----
#usethis::use_vignette("dashboard")
#devtools::build_vignettes()
## Code coverage ----
## (You'll need GitHub there)
#usethis::use_github()
#usethis::use_travis()
#usethis::use_appveyor()
# You're now set! ----
# go to dev/03_deploy.R
rstudioapi::navigateToFile("dev/03_deploy.R")
## RStudio ----
## If you want to deploy on RStudio related platforms
# golem::add_rstudioconnect_file()
golem::add_shinyappsio_file()
usethis::use_package( "zoo" , min_version = T)
usethis::use_package( "systemfonts", min_version = T)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app() # add parameters here (if any)
git reset
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
usethis::use_package( "lubridate", min_version = T)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## RStudio ----
## If you want to deploy on RStudio related platforms
# golem::add_rstudioconnect_file()
# golem::add_shinyappsio_file()
golem::add_shinyserver_file()
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app() # add parameters here (if any)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app() # add parameters here (if any)
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app() # add parameters here (if any)
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app() # add parameters here (if any)
#' Run the Shiny Application
#'
#' @param ... A series of options to be used inside the app.
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
#' @importFrom data.table :=
#' @importFrom data.table %between%
#' @importFrom dplyr %>%
run_app <- function(
...
) {
readRenviron(".Renviron")
# Set-up:
options(
spinner.color="#9fc9f4",
spinner.type=8
)
# reticulate::use_python(Sys.which("python"))
covid <<- import_covid() # Covid data is sourced into memory once as it is not very large and this speeds up other processes
world_map <<- data.table::data.table(ggplot2::map_data("world")) # Load world map data on start up
# Mapping important countries to COVID data:
world_map[region=="USA", region:="United States of America"]
world_map[region=="UK", region:="United Kingdom of Great Britain and Northern Ireland"]
# Custome plot theme:
ggplot2::theme_set(theme_covid_mental()) # global plot theme
# Global parameters:
covid_vars <<- list("Cases"="cases", "Deaths"="deaths", "Recovered"="recovered")
# Python dependencies:
PYTHON_DEPENDENCIES = c('pymongo', 'pandas')
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server
),
golem_opts = list(...)
)
}
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
runApp()
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app() # add parameters here (if any)
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app() # add parameters here (if any)
getwd()
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app() # add parameters here (if any)
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app() # add parameters here (if any)
# ------------------ App virtualenv setup (Do not edit) ------------------- #
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
rm(list=ls())
file.edit(".Rprofile")
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app() # add parameters here (if any)
file.path(Sys.getenv("TRANSFORM_DIR")
)
Sys.getenv("TRANSFORM_DIR")
Sys.getenv("VIRTUALENV_NAME")
# ------------------ App virtualenv setup (Do not edit) ------------------- #
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
Sys.getenv("TRANSFORM_DIR")
rm(list=ls())
Sys.getenv("TRANSFORM_DIR")
TRANSFORM_DIR
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app() # add parameters here (if any)
rm(list = ls())
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app() # add parameters here (if any)
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app() # add parameters here (if any)
rsconnect::deployApp()
## RStudio ----
## If you want to deploy on RStudio related platforms
# golem::add_rstudioconnect_file()
golem::add_shinyappsio_file()
reticulate::virtualenv_create(envname = 'example_env_name',
python= '/usr/bin/python3')
shiny::runApp()
usethis::edit_r_environ()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# ------------------ App virtualenv setup (Do not edit) ------------------- #
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
# Create virtual env and install dependencies
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
reticulate::virtualenv_install(virtualenv_dir, packages = PYTHON_DEPENDENCIES, ignore_installed=TRUE)
reticulate::use_virtualenv(virtualenv_dir, required = T)
reticulate::py_config()
usethis::edit_r_environ()
Sys.which("python")
Sys.which("python3")
# Create virtual env and install dependencies
reticulate::virtualenv_create(envname = virtualenv_dir, python = virtualenv_dir)
reticulate::virtualenv_install(virtualenv_dir, packages = PYTHON_DEPENDENCIES, ignore_installed=TRUE)
reticulate::use_virtualenv(virtualenv_dir, required = T)
# Create virtual env and install dependencies
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
reticulate::virtualenv_install(virtualenv_dir, packages = PYTHON_DEPENDENCIES, ignore_installed=TRUE)
reticulate::use_virtualenv(virtualenv_dir, required = T)
reticulate::py_config()
# ------------------ App virtualenv setup (Do not edit) ------------------- #
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
# Create virtual env and install dependencies
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
reticulate::virtualenv_install(virtualenv_dir, packages = PYTHON_DEPENDENCIES, ignore_installed=TRUE)
usethis::edit_r_environ()
reticulate::py_config()
usethis::edit_r_environ()
# Create virtual env and install dependencies
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
reticulate::virtualenv_install(virtualenv_dir, packages = PYTHON_DEPENDENCIES, ignore_installed=TRUE)
?reticulate::virtualenv_install()
Sys.which("python3")
# Create virtual env and install dependencies
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
reticulate::virtualenv_install(virtualenv_dir, packages = PYTHON_DEPENDENCIES, ignore_installed=TRUE)
reticulate::use_virtualenv(virtualenv_dir, required = T)
# ------------------ App virtualenv setup (Do not edit) ------------------- #
virtualenv_dir = Sys.getenv('VIRTUALENV_NAME')
python_path = Sys.getenv('PYTHON_PATH')
# Create virtual env and install dependencies
reticulate::virtualenv_create(envname = virtualenv_dir, python = python_path)
reticulate::virtualenv_install(virtualenv_dir, packages = PYTHON_DEPENDENCIES, ignore_installed=TRUE)
reticulate::use_virtualenv(virtualenv_dir, required = T)
reticulate::py_config()
shiny::runApp()
usethis::use_package( "shinycssloaders" )
usethis::use_package( "lubridate", min_version = T)
usethis::use_package( "maps" )
shiny::runApp()
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app(use_venv=F) # add parameters here (if any)
usethis::edit_r_environ()
list.files("inst/app/www")
## Favicon ----
# If you want to change the favicon (default is golem's one)
#golem::remove_favicon()
golem::use_favicon("inst/app/www/head-side-virus-solid.svg") # path = "path/to/ico". Can be an online file.
## Favicon ----
# If you want to change the favicon (default is golem's one)
#golem::remove_favicon()
golem::use_favicon("inst/app/www/mental.ico") # path = "path/to/ico". Can be an online file.
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app(use_venv=F) # add parameters here (if any)
## Favicon ----
# If you want to change the favicon (default is golem's one)
#golem::remove_favicon()
golem::use_favicon("inst/app/www/mental.ico") # path = "path/to/ico". Can be an online file.
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
library(covidMentalHealth)
?run_app
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
library(covidMentalHealth)
?run_app
?install_py_dependencies
devtools::install_git(url = "https://github.com/pat-alt/covidMentalHealth.git", branch = "main")
devtools::install_github("https://github.com/pat-alt/covidMentalHealth")
devtools::install_github("https://github.com/pat-alt/covidMentalHealth", force = T)
## Docker ----
## If you want to deploy via a generic Dockerfile
golem::add_dockerfile()
devtools::install_github("pat-alt/fromScratchR")
require(fromScratchR)
!require(fromScratchR)
shiny::runApp()
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app(use_venv=F) # add parameters here (if any)
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file
pkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
covidMentalHealth::run_app(use_venv=F) # add parameters here (if any)
