get_sentiment_by(tweets_tidy, id)
tweets_tidy <- prepare_tweet_text(latest)
dt_plot <- get_sentiment_by(tweets_tidy, timestamp)
ggplot2::ggplot(dt_plot, ggplot2::aes(x=timestamp, y=sentiment)) +
ggplot2::geom_col()
get_sentiment_by <- function(tweets_tidy, ...) {
tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing")) %>%
dplyr::count(..., sentiment) %>%
tidyr::spread(sentiment, n, fill = 0)  %>%
dplyr::mutate(sentiment = positive - negative)
tweets_tidy[,pos_neg:=ifelse(sentiment>=0, "positive", "negative")]
return(tweets_tidy)
}
tweets_tidy <- prepare_tweet_text(latest)
dt_plot <- get_sentiment_by(tweets_tidy, timestamp)
ggplot2::ggplot(dt_plot, ggplot2::aes(x=timestamp, y=sentiment)) +
ggplot2::geom_col()
get_sentiment_by <- function(tweets_tidy, ...) {
tweets_tidy <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing")) %>%
dplyr::count(..., sentiment) %>%
tidyr::spread(sentiment, n, fill = 0)  %>%
dplyr::mutate(sentiment = positive - negative)
tweets_tidy[,pos_neg:=ifelse(sentiment>=0, "positive", "negative")]
return(tweets_tidy)
}
tweets_tidy <- prepare_tweet_text(latest)
dt_plot <- get_sentiment_by(tweets_tidy, timestamp)
ggplot2::ggplot(dt_plot, ggplot2::aes(x=timestamp, y=sentiment)) +
ggplot2::geom_col()
tweets_tidy <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing")) %>%
dplyr::count(..., sentiment) %>%
tidyr::spread(sentiment, n, fill = 0)  %>%
dplyr::mutate(sentiment = positive - negative)
get_sentiment_by(tweets_tidy, timestamp)
get_sentiment_by <- function(tweets_tidy, ...) {
tweets_tidy <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing")) %>%
dplyr::count(..., sentiment) %>%
tidyr::spread(sentiment, n, fill = 0)  %>%
dplyr::mutate(sentiment = positive - negative)
#tweets_tidy[,pos_neg:=ifelse(sentiment>=0, "positive", "negative")]
return(tweets_tidy)
}
test = get_sentiment_by(tweets_tidy, timestamp)
test
test[,pos_neg:=ifelse(sentiment>=0, "positive", "negative")]
test[,sentiment>=0]
test[,ifelse(sentiment>=0, "positive", "negative")]
test[,val:=ifelse(sentiment>=0, "positive", "negative")]
test
test = get_sentiment_by(tweets_tidy, timestamp)
test[,val:=ifelse(sentiment>=0, "positive", "negative")]
test = get_sentiment_by(tweets_tidy, timestamp)
test[,val:=sentiment>=0]
test = get_sentiment_by(tweets_tidy, timestamp)
test
test[,sentiment>=0]
test[,value:=sentiment>=0]
test
get_sentiment_by <- function(tweets_tidy, ...) {
tweets_tidy <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing")) %>%
dplyr::count(..., sentiment) %>%
tidyr::spread(sentiment, n, fill = 0)  %>%
dplyr::mutate(sent = positive - negative)
tweets_tidy[,pos_neg:=ifelse(sentiment>=0, "positive", "negative")]
return(tweets_tidy)
}
test = get_sentiment_by(tweets_tidy, timestamp)
test
get_sentiment_by <- function(tweets_tidy, ...) {
tweets_tidy <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing")) %>%
dplyr::count(..., sentiment) %>%
tidyr::spread(sentiment, n, fill = 0)  %>%
dplyr::mutate(sent = positive - negative)
tweets_tidy[,pos_neg:=ifelse(sent>=0, "positive", "negative")]
return(tweets_tidy)
}
test = get_sentiment_by(tweets_tidy, timestamp)
test
test
data.table::setattr(tweets_tidy, "pos_neg", tweets_tidy$sentiment>=0)
get_sentiment_by <- function(tweets_tidy, ...) {
tweets_tidy <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing")) %>%
dplyr::count(..., sentiment) %>%
tidyr::spread(sentiment, n, fill = 0)  %>%
dplyr::mutate(sentiment = positive - negative)
data.table::setattr(tweets_tidy, "pos_neg", tweets_tidy$sentiment>=0)
return(tweets_tidy)
}
test = get_sentiment_by(tweets_tidy, timestamp)
test
data.table::setattr(tweets_tidy, "pos_neg", tweets_tidy$sentiment>=0)
tweets_tidy
get_sentiment_by <- function(tweets_tidy, ...) {
tweets_tidy <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing")) %>%
dplyr::count(..., sentiment) %>%
tidyr::spread(sentiment, n, fill = 0)  %>%
dplyr::mutate(sentiment = positive - negative)
tweets_tidy <- data.table::setattr(tweets_tidy, "pos_neg", tweets_tidy$sentiment>=0)
return(tweets_tidy)
}
test = get_sentiment_by(tweets_tidy, timestamp)
test
data.table::setattr(test, "pos_neg", test$sentiment>=0)
test
data.table::setattr(test, "pos_neg", sentiment>=0)
data.table::setattr(test, "pos_neg", test$sentiment>=0)
test
data.table::setattr(test, "pos_neg", test$sentiment>=0)
data.table::setattr(test, "pos_neg", test$sentiment>=0)
test
get_sentiment_by <- function(tweets_tidy, ...) {
tweets_tidy <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing")) %>%
dplyr::count(..., sentiment) %>%
tidyr::spread(sentiment, n, fill = 0)  %>%
dplyr::mutate(sentiment = positive - negative)
suppressWarnings(tweets_tidy[,pos_neg:=ifelse(sentiment>=0, "positive", "negative")])
return(tweets_tidy)
}
test = get_sentiment_by(tweets_tidy, timestamp)
test
test
tweets_tidy <- prepare_tweet_text(latest)
dt_plot <- get_sentiment_by(tweets_tidy, timestamp)
ggplot2::ggplot(dt_plot, ggplot2::aes(x=timestamp, y=sentiment, fill=pos_neg)) +
ggplot2::geom_col()
ggplot2::ggplot(dt_plot, ggplot2::aes(x=timestamp, y=sentiment, fill=pos_neg)) +
ggplot2::geom_col() +
ggplot2::scale_fill_manual(
guide=FALSE,
values = c("green", "red")
) +
ggplot2::labs(
x="Time",
y="Sentiment"
)
ggplot2::ggplot(dt_plot, ggplot2::aes(x=timestamp, y=sentiment, fill=pos_neg)) +
ggplot2::geom_col() +
ggplot2::scale_fill_manual(
guide=FALSE,
values = c("red", "green")
) +
ggplot2::labs(
x="Time",
y="Sentiment"
)
tweets_tidy <- prepare_tweet_text(latest)
dt_plot <- get_sentiment_by(tweets_tidy, timestamp)
gg <- ggplot2::ggplot(dt_plot, ggplot2::aes(x=timestamp, y=sentiment, fill=pos_neg)) +
ggplot2::geom_col() +
ggplot2::scale_fill_manual(
guide=FALSE,
values = c("red", "green")
) +
ggplot2::labs(
x="Time",
y="Sentiment"
)
plotly::ggplotly(gg)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
tweets_tidy <- prepare_tweet_text(latest)
latest <-  import_latest_tweets()
latest <-  import_latest_tweets(10)
tweets_tidy <- prepare_tweet_text(latest)
dt_plot <- get_sentiment_by(tweets_tidy, timestamp)
dt_plot
dt_plot
dt_plot <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing")) %>%
dplyr::count(word)
dt_plot
tweets_tidy <- prepare_tweet_text(latest)
dt_plot <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing"))
dt_plot
dt_plot[,.N, by=word]
dt_plot[,n:=.N, by=word]
library(data.table)
dt_plot[,n:=.N, by=word]
dt:plot
dt_plot
tweets_tidy <- prepare_tweet_text(latest)
dt_plot <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing"))
dt_plot[,n:=.N, by=word]
set.seed(42)
ggplot2::ggplot(dt_plot, ggplot2::aes(label = word, size = n, colour=sentiment)) +
ggwordcloud::geom_text_wordcloud() +
ggplot2::scale_size_area() +
ggplot2::scale_colour_manual(
guide=FALSE,
values = c("red", "green")
) +
ggplot2::theme_minimal()
tweets_tidy <- prepare_tweet_text(latest)
dt_plot <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing"))
dt_plot[,n:=.N, by=word]
set.seed(42)
dt_plot <- unique(dt_plot[,.(word, n, colour)])
ggplot2::ggplot(dt_plot, ggplot2::aes(label = word, size = n, colour=sentiment)) +
ggwordcloud::geom_text_wordcloud() +
ggplot2::scale_size_area() +
ggplot2::scale_colour_manual(
guide=FALSE,
values = c("red", "green")
) +
ggplot2::theme_minimal()
tweets_tidy <- prepare_tweet_text(latest)
dt_plot <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing"))
dt_plot[,n:=.N, by=word]
set.seed(42)
dt_plot <- unique(dt_plot[,.(word, n, sentiment)])
ggplot2::ggplot(dt_plot, ggplot2::aes(label = word, size = n, colour=sentiment)) +
ggwordcloud::geom_text_wordcloud() +
ggplot2::scale_size_area() +
ggplot2::scale_colour_manual(
guide=FALSE,
values = c("red", "green")
) +
ggplot2::theme_minimal()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
latest <-  import_latest_tweets(10)
tweets_tidy <- prepare_tweet_text(latest)
dt_plot <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing"))
dt_plot[,n:=.N, by=word]
set.seed(42)
dt_plot <- unique(dt_plot[,.(word, n, sentiment)])
ggplot2::ggplot(dt_plot, ggplot2::aes(label = word, size = n, colour=sentiment)) +
ggwordcloud::geom_text_wordcloud() +
ggplot2::scale_size_area() +
ggplot2::scale_colour_manual(
guide=FALSE,
values = c("red", "green")
) +
ggplot2::theme_minimal()
tweets_tidy <- prepare_tweet_text(latest)
dt_plot <- tweets_tidy %>%
dplyr::inner_join(tidytext::get_sentiments("bing"))
dt_plot[,n:=.N, by=word]
set.seed(42)
dt_plot <- unique(dt_plot[,.(word, n, sentiment)])
ggplot2::ggplot(dt_plot, ggplot2::aes(label = word, size = n, colour=sentiment)) +
ggwordcloud::geom_text_wordcloud() +
ggplot2::scale_size_area() +
ggplot2::scale_colour_manual(
guide=FALSE,
values = c("red", "green")
)
ggplot2::ggplot(dt_plot, ggplot2::aes(label = word, size = n, colour=sentiment)) +
ggwordcloud::geom_text_wordcloud() +
ggplot2::scale_size_area(max_size = 20) +
ggplot2::scale_colour_manual(
guide=FALSE,
values = c("red", "green")
)
ggplot2::ggplot(dt_plot, ggplot2::aes(label = word, size = n, colour=sentiment)) +
ggwordcloud::geom_text_wordcloud() +
ggplot2::scale_size_area(max_size = 15) +
ggplot2::scale_colour_manual(
guide=FALSE,
values = c("red", "green")
)
ggplot2::ggplot(dt_plot, ggplot2::aes(label = word, size = n, colour=sentiment)) +
ggwordcloud::geom_text_wordcloud() +
ggplot2::scale_size_area(max_size = 15) +
ggplot2::scale_colour_manual(
guide=FALSE,
values = c("coral", "lightgreen")
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
?scale_fill_brewer
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
latest <- import_latest_tweets(10)
tweets_tidy <- prepare_tweet_text(latest)
tweets_tidy
dt_plot <- latest[date == input$date_map]
input = list(date_map=Sys.Date())
input
dt_plot <- latest[date == input$date_map]
dt_plot <- latest[as.Date(timestamp) == input$date_map]
dt_plot
dt_plot <- merge(y=world_map, x=dt_plot, by.y="region", by.x="country_name", all.x = T)
dt_plot <- merge(y=world_map, x=dt_plot, by.y="region", by.x="author_location", all.x = T)
dt_plot
dt_plot[,value:=base::get(input$variable_map)]
dt_plot
dt_plot[,n:=.N,by=author_location]
dt_plot
dt_plot[,n:=length(unique(id)),by=author_location]
dt_plot
dt_plot$n
unique(dt_plot$n)
unique(dt_plot$author_location)
dt_plot[,value:=length(unique(id)),by=author_location]
gg <- ggplot2::ggplot(dt_plot, ggplot2::aes(x = long, y = lat, group = group)) +
ggplot2::geom_polygon(ggplot2::aes(fill = value), color = "white")+
ggplot2::scale_fill_gradient(low = "#f7b49e", high = "#f74307", name="Count:")
plotly::ggplotly(gg)
tweets_tidy <- prepare_tweet_text(dt_plot)
dt_plot <- get_sentiment_by(tweets_tidy, author_location)
dt_plot
dt_plot
tweets_tidy
tweets_tidy <- unique(dt_plot[,.(author_location, id, text, long, lat, group, order, subregion)])
dt_plot <- latest[as.Date(timestamp) == input$date_map]
dt_plot <- merge(y=world_map, x=dt_plot, by.y="region", by.x="author_location", all.x = T)
tweets_tidy <- unique(dt_plot[,.(author_location, id, text, long, lat, group, order, subregion)])
tweets_tidy <- prepare_tweet_text(dt_plot)
dt_plot <- get_sentiment_by(tweets_tidy, author_location)
dt_plot
dt_plot
tweets_tidy
dt_plot <- latest[as.Date(timestamp) == input$date_map]
dt_plot <- merge(y=world_map, x=dt_plot, by.y="region", by.x="author_location", all.x = T)
tweets_tidy <- unique(dt_plot[,.(author_location, id, text, long, lat, group, order, subregion)])
tweets_tidy
latest
dt_plot <- latest[as.Date(timestamp) == input$date_map]
dt_plot
dt_plot <- prepare_tweet_text(dt_plot)
dt_plot
dt_plot <- merge(y=world_map, x=dt_plot, by.y="region", by.x="author_location", all.x = T)
dt_plot[,value:=length(unique(id)),by=author_location]
gg <- ggplot2::ggplot(dt_plot, ggplot2::aes(x = long, y = lat, group = group)) +
ggplot2::geom_polygon(ggplot2::aes(fill = value), color = "white")+
ggplot2::scale_fill_gradient(low = "#f7b49e", high = "#f74307", name="Count:")
plotly::ggplotly(gg)
dt_plot <- get_sentiment_by(tweets_tidy, author_location)
dt_plot <- get_sentiment_by(dt_plot, author_location)
dt_plot
dt_plot
req(input$date_map)
latest <- latest_tweets()
dt_plot <- latest[as.Date(timestamp) == input$date_map]
dt_plot <- prepare_tweet_text(dt_plot)
dt_plot <- merge(y=world_map, x=dt_plot, by.y="region", by.x="author_location", all.x = T)
dt_plot
dt_plot[author_location=="India"]
dt_plot <- latest[as.Date(timestamp) == input$date_map]
dt_plot <- prepare_tweet_text(dt_plot)
dt_plot <- get_sentiment_by(dt_plot, author_location)
dt_plot
dt_plot
dt_plot <- latest[as.Date(timestamp) == input$date_map]
dt_plot <- merge(y=world_map, x=dt_plot, by.y="region", by.x="author_location", all.x = T)
dt_plot[,value:=length(unique(id)),by=author_location]
gg <- ggplot2::ggplot(dt_plot, ggplot2::aes(x = long, y = lat, group = group)) +
ggplot2::geom_polygon(ggplot2::aes(fill = value), color = "white")+
ggplot2::scale_fill_gradient(low = "#f7b49e", high = "#f74307", name="Count:")
plotly::ggplotly(gg)
dt_plot <- latest[as.Date(timestamp) == input$date_map]
dt_plot <- prepare_tweet_text(dt_plot)
dt_plot <- get_sentiment_by(dt_plot, author_location)
dt_plot <- get_sentiment_by(dt_plot, author_location)
dt_plot[,value:=sentiment]
dt_plot[,value:=sentiment]
dt_plot
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
import_latest_tweets(10)
latest = import_latest_tweets(10)
dt_plot <- merge(y=world_map, x=dt_plot, by.y="region", by.x="author_location", all.x = T)
dt_plot <- latest[as.Date(timestamp) == input$date_map]
dt_plot <- merge(y=world_map, x=dt_plot, by.y="region", by.x="author_location", all.x = T)
dt_plot = import_latest_tweets(10)
dt_plot <- merge(y=world_map, x=dt_plot, by.y="region", by.x="author_location", all.x = T)
dt_plot[,value:=length(unique(id)),by=author_location]
gg <- ggplot2::ggplot(dt_plot, ggplot2::aes(x = long, y = lat, group = group)) +
ggplot2::geom_polygon(ggplot2::aes(fill = value), color = "white") +
ggplot2::scale_fill_gradient(low = "#f7b49e", high = "#f74307", name="Count:")
plotly::ggplotly(gg)
golem::add_fct( "plot_theme" )
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
