# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(covidMentalHealth)
library(covidMentalHealth)
## Fill the DESCRIPTION ----
## Add meta data about your application
golem::fill_desc(
pkg_name = "bgse-dw-final-project", # The Name of the package containing the App
pkg_title = "A simple Shiny app that relates COVID-19 to mental health.", # The Title of the package containing the App
pkg_description = "PKG_DESC.", # The Description of the package containing the App
author_first_name = "Patrick", # Your First Name
author_last_name = "Altmeyer", # Your Last Name
author_email = "patrick.altmeyer@barcelonagse.eu", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
## Fill the DESCRIPTION ----
## Add meta data about your application
golem::fill_desc(
pkg_name = "bgse-dw-final-project", # The Name of the package containing the App
pkg_title = "A simple Shiny app that relates COVID-19 to mental health", # The Title of the package containing the App
pkg_description = "PKG_DESC.", # The Description of the package containing the App
author_first_name = "Patrick", # Your First Name
author_last_name = "Altmeyer", # Your Last Name
author_email = "patrick.altmeyer@barcelonagse.eu", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
## Fill the DESCRIPTION ----
## Add meta data about your application
golem::fill_desc(
pkg_name = "covidMentalHealth", # The Name of the package containing the App
pkg_title = "A simple Shiny app that relates COVID-19 to mental health", # The Title of the package containing the App
pkg_description = "PKG_DESC.", # The Description of the package containing the App
author_first_name = "Patrick", # Your First Name
author_last_name = "Altmeyer", # Your Last Name
author_email = "patrick.altmeyer@barcelonagse.eu", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
library(covidMentalHealth)
covidMentalHealth::run_app()
## Add helper functions ----
## Creates ftc_* and utils_*
golem::add_fct( "import_tweets" )
golem::add_fct( "import_covid" )
usethis::use_package( "reticulate" )
n <- r
n <- 200
reticulate::repl_python()
reticulate::import(load_from_mongo) # loads python function
reticulate::import(./load_from_mongo) # loads python function
reticulate::import("./load_from_mongo") # loads python function
reticulate::import("./load_from_mongo.py") # loads python function
#' Read App Config
#'
#' @param value Value to retrieve from the config file.
#' @param config R_CONFIG_ACTIVE value.
#' @param use_parent Logical, scan the parent directory for config file.
#'
#' @importFrom config get
#'
#' @noRd
readRenviron("../.env")
#' Read App Config
#'
#' @param value Value to retrieve from the config file.
#' @param config R_CONFIG_ACTIVE value.
#' @param use_parent Logical, scan the parent directory for config file.
#'
#' @importFrom config get
#'
#' @noRd
readRenviron("../.Renviron")
list.files(..)
list.files("..")
readRenviron(".Renviron")
readRenviron(".Renviron")
Sys.getenv("TRANSORM_DIR")
Sys.getenv("TRANSFORM_DIR")
reticulate::import_from_path(load_from_mongo, Sys.getenv("TRANSFORM_DIR")) # loads python function
getwd()
reticulate::import_from_path("load_from_mongo", Sys.getenv("TRANSFORM_DIR")) # loads python function
reticulate::import_from_path("load_from_mongo", Sys.getenv("TRANSFORM_DIR")) # loads python function
reticulate::import_from_path("load_from_mongo", Sys.getenv("TRANSFORM_DIR")) # loads python function
py$load_from_mongo(r.n)
load_from_mongo$
pd
load_from_mongo <- reticulate::import_from_path("load_from_mongo", Sys.getenv("TRANSFORM_DIR")) # loads python function
load_from_mongo$load_from_mongo(r.n)
load_from_mongo$load_from_mongo(n)
load_from_mongo <- reticulate::import_from_path("load_from_mongo", Sys.getenv("TRANSFORM_DIR")) # loads python function
load_from_mongo$load_from_mongo(n)
reticulate::repl_python()
load_from_mongo$load_from_mongo(n)
load_from_mongo <- reticulate::import_from_path("load_from_mongo", Sys.getenv("TRANSFORM_DIR")) # loads python function
load_from_mongo$load_from_mongo(n)
load_from_mongo <- reticulate::import_from_path("load_from_mongo", Sys.getenv("TRANSFORM_DIR")) # loads python function
load_from_mongo$load_from_mongo(n)
reticulate::repl_python()
