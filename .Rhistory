data = dt_plot,
ggplot2::aes(x=date, y=value, colour=country_name)
) +
ggplot2::scale_color_discrete(
name="Country:"
) +
ggiraph::geom_col_interactive(ggplot2::aes(tooltip=country_name)) +
ggplot2::labs(
x = NULL,
y = y_lab
)
my_girafe(gg, 6, 4)
gg <- ggplot2::ggplot(
data = dt_plot,
ggplot2::aes(x=date, y=value, fill=country_name)
) +
ggplot2::scale_fill_discrete(
name="Country:"
) +
ggiraph::geom_col_interactive(ggplot2::aes(tooltip=country_name)) +
ggplot2::labs(
x = NULL,
y = y_lab
)
my_girafe(gg, 6, 4)
gg <- ggplot2::ggplot(
data = dt_plot,
ggplot2::aes(x=date, y=value, fill=country_name)
) +
ggplot2::scale_fill_discrete(
name="Country:"
) +
ggiraph::geom_col_interactive(ggplot2::aes(tooltip=country_name, tooltip=country_name), position="dodge") +
ggplot2::labs(
x = NULL,
y = y_lab
)
gg <- ggplot2::ggplot(
data = dt_plot,
ggplot2::aes(x=date, y=value, fill=country_name)
) +
ggplot2::scale_fill_discrete(
name="Country:"
) +
ggiraph::geom_col_interactive(ggplot2::aes(tooltip=country_name), position="dodge") +
ggplot2::labs(
x = NULL,
y = y_lab
)
my_girafe(gg, 6, 4)
dt_plot
?geom_col_interactive
gg <- ggplot2::ggplot(
data = dt_plot,
ggplot2::aes(x=date, y=value, fill=country_name)
) +
ggplot2::scale_fill_discrete(
name="Country:"
) +
ggiraph::geom_bar_interactive(ggplot2::aes(tooltip=country_name), stat="identity") +
ggplot2::labs(
x = NULL,
y = y_lab
)
my_girafe(gg, 6, 4)
gg <- ggplot2::ggplot(
data = dt_plot,
ggplot2::aes(x=date, y=value, fill=country_name)
) +
ggplot2::scale_fill_discrete(
name="Country:"
) +
ggiraph::geom_bar_interactive(ggplot2::aes(tooltip=country_name), stat="identity") +
ggplot2::labs(
x = NULL,
y = y_lab
) +
ggplot2::coord_flip()
gg
gg <- ggplot2::ggplot(
data = dt_plot,
ggplot2::aes(x=country, y=value, fill=country_name)
) +
ggplot2::scale_fill_discrete(
name="Country:"
) +
ggiraph::geom_bar_interactive(ggplot2::aes(tooltip=country_name), stat="identity") +
ggplot2::labs(
x = NULL,
y = y_lab
) +
ggplot2::coord_flip()
dt_plot <- covid
dt_plot[,value:=cases]
dt_plot[,value:=mean(c(NA,diff(value)),na.rm=T),by=.(country, country_name, date)]
dt_plot
dt_plot[,value:=mean(c(NA,diff(value)),na.rm=T),by=.(country, country_name)]
gg <- ggplot2::ggplot(
data = dt_plot,
ggplot2::aes(x=country, y=value, fill=country_name)
) +
ggplot2::scale_fill_discrete(
name="Country:"
) +
ggiraph::geom_bar_interactive(ggplot2::aes(tooltip=country_name), stat="identity") +
ggplot2::labs(
x = NULL,
y = y_lab
) +
ggplot2::coord_flip()
my_girafe(gg, 6, 4)
dt_plot[country_name %in% unique(country_name)[1:5]]
dt_plot =dt_plot[country_name %in% unique(country_name)[1:5]]
gg <- ggplot2::ggplot(
data = dt_plot,
ggplot2::aes(x=country, y=value, fill=country_name)
) +
ggplot2::scale_fill_discrete(
name="Country:"
) +
ggiraph::geom_bar_interactive(ggplot2::aes(tooltip=country_name), stat="identity") +
ggplot2::labs(
x = NULL,
y = y_lab
) +
ggplot2::coord_flip()
my_girafe(gg, 6, 4)
dt_plot
dt_plot[,value:=mean(c(NA,diff(value)),na.rm=T),by=.(country, country_name)]
dt_plot
dt_plot[,value:=cases]
dt_plot[,value:=mean(c(NA,diff(value)),na.rm=T),by=.(country, country_name)]
dt_plot
gg <- ggplot2::ggplot(
data = dt_plot,
ggplot2::aes(x=country, y=value, fill=country_name)
) +
ggplot2::scale_fill_discrete(
name="Country:"
) +
ggiraph::geom_bar_interactive(ggplot2::aes(tooltip=country_name), stat="identity") +
ggplot2::labs(
x = NULL,
y = y_lab
) +
ggplot2::coord_flip()
my_girafe(gg, 6, 4)
gg <- ggplot2::ggplot(
data = dt_plot,
ggplot2::aes(x=country_name, y=value, fill=country_name)
) +
ggplot2::scale_fill_discrete(
name="Country:",
guide=F
) +
ggiraph::geom_bar_interactive(ggplot2::aes(tooltip=country_name), stat="identity") +
ggplot2::labs(
x = NULL,
y = y_lab
) +
ggplot2::coord_flip()
my_girafe(gg, 6, 4)
dt_plot
gg <- ggplot2::ggplot(
data = dt_plot,
ggplot2::aes(x=country_name, y=value, fill=country_name)
) +
ggplot2::scale_fill_discrete(
name="Country:",
guide=F
) +
ggiraph::geom_bar_interactive(ggplot2::aes(
tooltip=sprintf(
"Country: %s\nCount: %i",
country_name,
value
)
), stat="identity") +
ggplot2::labs(
x = NULL,
y = y_lab
) +
ggplot2::coord_flip()
my_girafe(gg, 6, 4)
gg <- ggplot2::ggplot(
data = dt_plot,
ggplot2::aes(x=country_name, y=value, fill=country_name)
) +
ggplot2::scale_fill_discrete(
name="Country:",
guide=F
) +
ggiraph::geom_bar_interactive(ggplot2::aes(
tooltip=sprintf(
"Country: %s\nCount: %f",
country_name,
value
)
), stat="identity") +
ggplot2::labs(
x = NULL,
y = y_lab
) +
ggplot2::coord_flip()
my_girafe(gg, 6, 4)
gg <- ggplot2::ggplot(
data = dt_plot,
ggplot2::aes(x=country_name, y=value, fill=country_name)
) +
ggplot2::scale_fill_discrete(
name="Country:",
guide=F
) +
ggiraph::geom_bar_interactive(ggplot2::aes(
tooltip=sprintf(
"Country: %s\nCount: %f",
country_name,
value
)
), stat="identity") +
ggplot2::labs(
x = NULL,
y = y_lab
)
my_girafe(gg, 6, 4)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
latest=import_latest_tweets(10)
dt_plot = latest
dt_plot <- merge(y=world_map, x=dt_plot, by.y="region", by.x="parse_author_location", all = T)
dt_plot
dt_plot[,value:=length(unique(text[!is.na(text)])),by=parse_author_location]
dt_plot <- dt_plot[!is.na(group)]
gg <- ggplot2::ggplot(dt_plot, ggplot2::aes(x = long, y = lat)) +
ggiraph::geom_polygon_interactive(ggplot2::aes(
fill = value, group = group,
tooltip = sprintf(
"Count: %f\nCountry: %s",
value,
country
),
data_id = value
), color = NA) +
ggplot2::scale_fill_gradient(low = "#f7b49e", high = "#f74307", name="Number of tweets:") +
ggplot2::labs(
x="",
y=""
) +
theme_maps()
my_girafe(gg, 6, 2.5)
dt_plot
gg <- ggplot2::ggplot(dt_plot, ggplot2::aes(x = long, y = lat)) +
ggiraph::geom_polygon_interactive(ggplot2::aes(
fill = value, group = group,
tooltip = sprintf(
"Count: %f\nCountry: %s",
value,
parse_author_location
),
data_id = value
), color = NA) +
ggplot2::scale_fill_gradient(low = "#f7b49e", high = "#f74307", name="Number of tweets:") +
ggplot2::labs(
x="",
y=""
) +
theme_maps()
dt_plot
my_girafe(gg, 6, 2.5)
dt_plot = latest
dt_plot <- prepare_tweet_text(dt_plot)
dt_plot <- get_sentiment_by(dt_plot, parse_author_location)
dt_plot <- merge(y=world_map, x=dt_plot, by.y="region", by.x="parse_author_location", all = T)
data.table::setnames(dt_plot, "sentiment", "value")
dt_plot <- dt_plot[!is.na(group)]
gg <- ggplot2::ggplot(dt_plot, ggplot2::aes(x = long, y = lat)) +
ggiraph::geom_polygon_interactive(ggplot2::aes(
fill = value, group = group,
tooltip = sprintf(
"Sentiment: %f\nCountry: %s",
value,
parse_author_location
),
data_id = value
), color = NA) +
ggplot2::scale_fill_gradient(low = "coral", high = "lightblue", name="Sentiment:") +
ggplot2::labs(
x="",
y=""
) +
theme_maps()
my_girafe(gg, 6, 2.5)
dt_plot = covid[date==Sys.Date()]
dt_plot <- merge(y=world_map, x=dt_plot, by.y="region", by.x="country_name", all = T)
dt_plot[,value:=cases]
dt_plot <- dt_plot[!is.na(group)]
gg <- ggplot2::ggplot(dt_plot, ggplot2::aes(x = long, y = lat)) +
ggiraph::geom_polygon_interactive(ggplot2::aes(
fill = value, group = group,
tooltip = sprintf(
"Count: %f\nCountry: %s",
value,
country_name
),
data_id = value
), color = NA) +
ggplot2::scale_fill_gradient(low = "#f7b49e", high = "#f74307", name="Count:") +
ggplot2::labs(
x="",
y=""
) +
theme_maps()
my_girafe(gg, 6, 2.5)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
#' Import latest tweets
#'
#' @param n
#'
#' @importFrom data.table :=
#'
#' @return
#'
#' @examples
import_latest_tweets <- function(n) {
# Load Python module:
reticulate::source_python(file.path(Sys.getenv("TRANSFORM_DIR"),"tweets_to_df.py"))
dt <- data.table::data.table(import_latest_tweets(n)) # executes python function and imports output to R
dt <- tryCatch(
{
# Pre-process hashtags:
dt[,hashtags:=list(lapply(hashtags, function(i) lapply(i, function(j) j$text)))]
# data.table::setorder(dt, timestamp)
return(dt)
},
error = function(e) {
warning("Tweet database returned no data.")
return(data.table::data.table())
}
)
return(dt)
}
test = import_latest_tweets(10)
test
test
#' Import latest tweets
#'
#' @param n
#'
#' @importFrom data.table :=
#'
#' @return
#'
#' @examples
import_latest_tweets <- function(n) {
# Load Python module:
reticulate::source_python(file.path(Sys.getenv("TRANSFORM_DIR"),"tweets_to_df.py"))
dt <- data.table::data.table(import_latest_tweets(n)) # executes python function and imports output to R
dt <- tryCatch(
{
# Pre-process hashtags:
dt[,hashtags:=list(lapply(hashtags, function(i) lapply(i, function(j) j$text)))]
data.table::setorder(dt, -timestamp)
return(dt)
},
error = function(e) {
warning("Tweet database returned no data.")
return(data.table::data.table())
}
)
return(dt)
}
test = import_latest_tweets(10)
test
test
#' Import latest tweets
#'
#' @param n
#'
#' @importFrom data.table :=
#'
#' @return
#'
#' @examples
import_latest_tweets <- function(n) {
# Load Python module:
reticulate::source_python(file.path(Sys.getenv("TRANSFORM_DIR"),"tweets_to_df.py"))
dt <- data.table::data.table(import_latest_tweets(n)) # executes python function and imports output to R
dt <- tryCatch(
{
# Pre-process hashtags:
dt[,hashtags:=list(lapply(hashtags, function(i) lapply(i, function(j) j$text)))]
data.table::setorder(dt, timestamp)
return(dt)
},
error = function(e) {
warning("Tweet database returned no data.")
return(data.table::data.table())
}
)
return(dt)
}
test = import_latest_tweets(10)
test
test
test = import_latest_tweets(1000)
test
test
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
latest = import_latest_tweets(1000)
latest
latest
#' Import latest tweets
#'
#' @param n
#'
#' @importFrom data.table :=
#'
#' @return
#'
#' @examples
import_latest_tweets <- function(n) {
# Load Python module:
reticulate::source_python(file.path(Sys.getenv("TRANSFORM_DIR"),"tweets_to_df.py"))
dt <- data.table::data.table(import_latest_tweets(n)) # executes python function and imports output to R
dt <- tryCatch(
{
# Pre-process hashtags:
dt[,hashtags:=list(lapply(hashtags, function(i) lapply(i, function(j) j$text)))]
data.table::setorder(dt, -timestamp)
return(dt)
},
error = function(e) {
warning("Tweet database returned no data.")
return(data.table::data.table())
}
)
return(dt)
}
latest = import_latest_tweets(1000)
latest
latest
latest[order(-timestamp)]
latest[order(timestamp)]
latest = latest[order(timestamp)]
tab <- tail(latest[,.(timestamp, text)],3)
data.table::setnames(tab, c("timestamp", "text"), c("Time", "Tweet"))
tab[,Time:=as.character(Time)]
tab
latest <- latest[order(-timestamp)]
tab <- head(latest[,.(timestamp, text)],3)
data.table::setnames(tab, c("timestamp", "text"), c("Time", "Tweet"))
tab[,Time:=as.character(Time)]
tab
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
